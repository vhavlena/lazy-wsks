# Definition of the standard clock

pred ISCLOCK (var2 clk, var1 $) =
0 in clk &
all1 t: (t>0 & t<=$) => (t in clk <=> t-1 notin clk);

var2 GLOBALCLOCK;
#assert ISCLOCK(GLOBALCLOCK);

# Definition of standard latches

# Type asynchronios: always active
pred ASLATCH(var2 Input, Output, var1 $)=
all1 t: (0<t & t<=$) => (t in Output <=> t-1 in Input);

# Type active low: active when Clk is 0
pred ALLATCH(var2 Input, Output, Clk, var1 $)=
all1 t: (0<t & t<=$) => (t in Output <=> 
  (t-1 notin Clk & t-1 in Input
|  t-1 in    Clk & t-1 in Output));

# Type active high: active when Clk is 1
pred AHLATCH(var2 Input, Output, Clk, var1 $)=
all1 t: (0<t & t<=$) => (t in Output <=> 
  (t-1 in    Clk & t-1 in Input
|  t-1 notin Clk & t-1 in Output));

# Type raising edge: active when Clk just changed from 0 to 1
pred RELATCH(var2 Input, Output, Clk, var1 $)=
(1 in Output <=> 0 in Output) &
all1 t: (1<t & t<=$) => (t in Output <=>
  (t-2 notin Clk & t-1 in Clk & t-1 in Input
| (t-2 in Clk | t-1 notin Clk) & t-1 in Output ));

# Type falling edge: active when Clk just changed from 1 to 0
pred FELATCH(var2 Input, Output, Clk, var1 $)=
(1 in Output <=> 0 in Output) &
all1 t: (1<t & t<=$) => (t in Output <=>
  (t-2 in Clk & t-1 notin Clk & t-1 in Input
| (t-2 notin Clk | t-1 in Clk) & t-1 in Output ))
;

# some predicates for temporal logic

pred konstant(var2 signal, var0 val, var1 $)= 
all1 t: t<=$ => (t in signal <=> val);

pred stableAt(var2 signal, var1 t, var0 val, var1 $)=
all1 t2: (t<=t2 & t2<=$) => (t2 in signal <=> val);

pred equivAt(var2 signal1, var2 signal2, var1 t, var1 $)=
ex0 val: stableAt(signal1,t,val,$) & stableAt(signal2,t,val,$);

pred willBeEquiv(var2 signal1, var2 signal2, var1 $)=
ex1 t: t<=$ & equivAt(signal1,signal2,t,$);

pred HA ( var2 A, B, S0, S1, var1 $)=
  all1 t: t<=$ => ( t in S0 <=>
   (  t notin A &  t in B
   |  t in A &  t notin B ))
& all1 t: t<=$ => ( t in S1 <=>
   (  t in A &  t in B ))
;

pred FA (var0 A, B, var2 Cin, S, Cout, var1 $)=
ex2 Tmp0, Tmp1, Tmp2, AS, BS :
  HA(AS, BS, Tmp0, Tmp1,$)
& HA(Tmp0, Cin, S, Tmp2,$)
& all1 t: t<=$ => ( t in Cout <=>
   (  t in Tmp1 &  true 
   |  t notin Tmp1 &  t in Tmp2 ))
& all1 t: t<=$ => ((t in AS <=> A) & (t in BS <=> B))
;

pred BUSI(var0 init, var2 feedback, var2 feedin, var1 $)=
  (0 in feedin <=> init)
& (all1 t: (t>0 & t<=$) => ( t in feedin <=> t-1 in feedback));










pred __1 ( var2 v0, v1, v2, v3, v4, v5, v6, __2, __3, __4, 
           __5, __6, __7, __8, var1 $)=
ex2 __9, __10, __11, __12, v8, v10, v9, v7, __20, __21, 
           __51, __22, __35, __37, __42, __23, __30, __36, __44, __45, 
           __46, __13, __25, __29, __31, __34, __38, __40, __14, __32, 
           __15, __27, __16, __24, __39, __17, __33, __43, __18, __28, 
           __41, __47, __48, __49, __50, __52, __53, __19, __26 :
   0 in v7& ASLATCH( __9, v7,$)
&  0 in v8& ASLATCH( __10, v8,$)
&  0 notin v9& ASLATCH( __11, v9,$)
&  0 notin v10& ASLATCH( __12, v10,$)
& all1 t: t<=$ => ( t in __2 <=>
   (  t notin __13 ))
& all1 t: t<=$ => ( t in __3 <=>
   (  t notin __14 ))
& all1 t: t<=$ => ( t in __4 <=>
   (  t notin __15 ))
& all1 t: t<=$ => ( t in __5 <=>
   (  t notin __16 ))
& all1 t: t<=$ => ( t in __6 <=>
   (  t notin __17 ))
& all1 t: t<=$ => ( t in __7 <=>
   (  t notin __18 ))
& all1 t: t<=$ => ( t in __8 <=>
   (  t notin __19 ))
& all1 t: t<=$ => ( t in __9 <=>
   (  t notin __20 ))
& all1 t: t<=$ => ( t in __10 <=>
   (  t notin __21 ))
& all1 t: t<=$ => ( t in __11 <=>
   (  t notin __22 ))
& all1 t: t<=$ => ( t in __12 <=>
   (  t notin __23 ))
& all1 t: t<=$ => ( t in __24 <=>
   (  t notin v1 &  t notin v3 &  t in v4 &  t notin v7 &  t notin v8 &  t in v9 &  t notin v10 ))
& all1 t: t<=$ => ( t in __25 <=>
   (  t in v0 &  t notin v1 &  t in v2 &  t in v3 &  t notin v7 &  t notin v8 &  t in v9 &  t notin v10 ))
& all1 t: t<=$ => ( t in __26 <=>
   (  t notin v0 &  t in v5 &  t in v7 &  t in v8 &  t notin v9 &  t in v10 ))
& all1 t: t<=$ => ( t in __27 <=>
   (  t in v0 &  t notin v6 &  t in v7 &  t notin v9 &  t notin v10 ))
& all1 t: t<=$ => ( t in __28 <=>
   (  t in v0 &  t notin v1 &  t notin v3 &  t notin v4 &  t notin v7 &  t notin v8 &  t in v9 ))
& all1 t: t<=$ => ( t in __29 <=>
   (  t in v0 &  t notin v1 &  t in v5 &  t in v7 &  t in v9 &  t in v10 ))
& all1 t: t<=$ => ( t in __30 <=>
   (  t in v2 &  t in v4 &  t notin v8 &  t notin v9 &  t notin v10 ))
& all1 t: t<=$ => ( t in __31 <=>
   (  t in v0 &  t notin v1 &  t in v3 &  t notin v7 &  t notin v8 &  t in v9 &  t in v10 ))
& all1 t: t<=$ => ( t in __32 <=>
   (  t in v0 &  t notin v1 &  t notin v7 &  t in v8 &  t notin v9 &  t in v10 ))
& all1 t: t<=$ => ( t in __33 <=>
   (  t in v0 &  t in v1 &  t in v5 &  t in v7 &  t notin v9 &  t in v10 ))
& all1 t: t<=$ => ( t in __34 <=>
   (  t in v0 &  t notin v1 &  t in v2 &  t notin v8 &  t notin v9 &  t notin v10 ))
& all1 t: t<=$ => ( t in __35 <=>
   (  t in v0 &  t notin v1 &  t in v3 &  t notin v8 &  t in v9 ))
& all1 t: t<=$ => ( t in __36 <=>
   (  t notin v5 &  t in v7 &  t in v9 &  t in v10 ))
& all1 t: t<=$ => ( t in __37 <=>
   (  t in v0 &  t notin v1 &  t in v8 &  t in v9 &  t in v10 ))
& all1 t: t<=$ => ( t in __38 <=>
   (  t in v0 &  t notin v1 &  t notin v7 &  t notin v8 &  t notin v9 &  t in v10 ))
& all1 t: t<=$ => ( t in __39 <=>
   (  t in v0 &  t in v7 &  t notin v9 &  t notin v10 ))
& all1 t: t<=$ => ( t in __40 <=>
   (  t in v0 &  t notin v1 &  t in v4 &  t notin v7 &  t notin v8 &  t in v10 ))
& all1 t: t<=$ => ( t in __41 <=>
   (  t in v0 &  t notin v1 &  t notin v7 &  t in v8 &  t notin v9 &  t notin v10 ))
& all1 t: t<=$ => ( t in __42 <=>
   (  t in v0 &  t notin v1 &  t in v7 &  t in v9 ))
& all1 t: t<=$ => ( t in __43 <=>
   (  t in v1 &  t in v7 &  t notin v8 &  t notin v9 ))
& all1 t: t<=$ => ( t in __44 <=>
   (  t notin v0 &  t notin v5 &  t in v10 ))
& all1 t: t<=$ => ( t in __45 <=>
   (  t in v1 &  t notin v5 &  t in v8 &  t in v10 ))
& all1 t: t<=$ => ( t in __46 <=>
   (  t notin v5 &  t notin v7 &  t in v8 ))
& all1 t: t<=$ => ( t in __47 <=>
   (  t notin v0 &  t notin v8 ))
& all1 t: t<=$ => ( t in __48 <=>
   (  t notin v0 &  t notin v7 ))
& all1 t: t<=$ => ( t in __49 <=>
   (  t in v8 &  t in v9 ))
& all1 t: t<=$ => ( t in __50 <=>
   (  t in v0 &  t in v1 &  t notin v10 ))
& all1 t: t<=$ => ( t in __51 <=>
   (  t notin v0 ))
& all1 t: t<=$ => ( t in __52 <=>
   (  t in v1 &  t in v9 ))
& all1 t: t<=$ => ( t in __53 <=>
   (  t in v1 &  t notin v7 ))
& all1 t: t<=$ => ( t in __20 <=>
   (  t notin __25 &  t notin __29 &  t notin __33 &  t notin __36 &  t notin __41 &  t notin __43 &  t notin __45 &  t notin __50 &  t notin __51 &  t notin __52 &  t notin __53 ))
& all1 t: t<=$ => ( t in __21 <=>
   (  t notin __28 &  t notin __31 &  t notin __32 &  t notin __34 &  t notin __38 &  t notin __40 &  t notin __45 &  t notin __50 &  t notin __51 &  t notin __52 &  t notin __53 ))
& all1 t: t<=$ => ( t in __22 <=>
   (  t notin __34 &  t notin __35 &  t notin __37 &  t notin __38 &  t notin __40 &  t notin __41 &  t notin __42 ))
& all1 t: t<=$ => ( t in __23 <=>
   (  t notin __28 &  t notin __30 &  t notin __31 &  t notin __33 &  t notin __36 &  t notin __40 &  t notin __41 &  t notin __43 &  t notin __44 &  t notin __45 & 
            t notin __46 &  t notin __47 &  t notin __48 &  t notin __49 &  t notin __50 &  t notin __52 &  t notin __53 ))
& all1 t: t<=$ => ( t in __13 <=>
   (  t notin __25 &  t notin __29 &  t notin __31 &  t notin __34 &  t notin __38 &  t notin __40 ))
& all1 t: t<=$ => ( t in __14 <=>
   (  t notin __28 &  t notin __32 ))
& all1 t: t<=$ => ( t in __15 <=>
   (  t notin __27 ))
& all1 t: t<=$ => ( t in __16 <=>
   (  t notin __24 &  t notin __39 ))
& all1 t: t<=$ => ( t in __17 <=>
   (  t notin __33 &  t notin __43 ))
& all1 t: t<=$ => ( t in __18 <=>
   (  t notin __28 &  t notin __41 &  t notin __47 &  t notin __48 &  t notin __49 &  t notin __50 &  t notin __52 &  t notin __53 ))
& all1 t: t<=$ => ( t in __19 <=>
   (  t notin __26 ))
;

var2 v0, v1, v2, v3, v4, v5, v6, __2, __3, __4, 
           __5, __6, __7, __8;
var1 $;
assert __1 ( v0, v1, v2, v3, v4, v5, v6, __2, __3, __4, 
           __5, __6, __7, __8, $);
