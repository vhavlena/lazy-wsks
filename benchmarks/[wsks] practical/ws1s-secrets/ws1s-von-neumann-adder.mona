# Definition of the standard clock

pred ISCLOCK (var2 clk, var1 $) =
0 in clk &
all1 t: (t>0 & t<=$) => (t in clk <=> t-1 notin clk);

var2 GLOBALCLOCK;

# Definition of standard latches

# Type asynchronios: always active
pred ASLATCH(var2 Input, Output, var1 $)=
all1 t: (0<t & t<=$) => (t in Output <=> t-1 in Input);

# Type active low: active when Clk is 0
pred ALLATCH(var2 Input, Output, Clk, var1 $)=
all1 t: (0<t & t<=$) => (t in Output <=>
  (t-1 notin Clk & t-1 in Input
|  t-1 in    Clk & t-1 in Output));

# Type active high: active when Clk is 1
pred AHLATCH(var2 Input, Output, Clk, var1 $)=
all1 t: (0<t & t<=$) => (t in Output <=>
  (t-1 in    Clk & t-1 in Input
|  t-1 notin Clk & t-1 in Output));

# Type raising edge: active when Clk just changed from 0 to 1
pred RELATCH(var2 Input, Output, Clk, var1 $)=
(1 in Output <=> 0 in Output) &
all1 t: (1<t & t<=$) => (t in Output <=>
  (t-2 notin Clk & t-1 in Clk & t-1 in Input
| (t-2 in Clk | t-1 notin Clk) & t-1 in Output ));

# Type falling edge: active when Clk just changed from 1 to 0
pred FELATCH(var2 Input, Output, Clk, var1 $)=
(1 in Output <=> 0 in Output) &
all1 t: (1<t & t<=$) => (t in Output <=>
  (t-2 in Clk & t-1 notin Clk & t-1 in Input
| (t-2 notin Clk | t-1 in Clk) & t-1 in Output ))
;

# some predicates for temporal logic

pred konstant(var2 signal, var0 val, var1 $)=
all1 t: t<=$ => (t in signal <=> val);

pred stableAt(var2 signal, var1 t, var0 val, var1 $)=
all1 t2: (t<=t2 & t2<=$) => (t2 in signal <=> val);

pred equivAt(var2 signal1, var2 signal2, var1 t, var1 $)=
ex0 val: stableAt(signal1,t,val,$) & stableAt(signal2,t,val,$);

pred willBeEquiv(var2 signal1, var2 signal2, var1 $)=
ex1 t: t<=$ & equivAt(signal1,signal2,t,$);

pred HA ( var2 A, B, S0, S1, var1 $)=
  all1 t: t<=$ => ( t in S0 <=>
   (  t notin A &  t in B
   |  t in A &  t notin B ))
& all1 t: t<=$ => ( t in S1 <=>
   (  t in A &  t in B ))
;

pred FA (var0 A, B, var2 Cin, S, Cout, var1 $)=
ex2 Tmp0, Tmp1, Tmp2, AS, BS :
  HA(AS, BS, Tmp0, Tmp1,$)
& HA(Tmp0, Cin, S, Tmp2,$)
& all1 t: t<=$ => ( t in Cout <=>
   (  t in Tmp1 &  true
   |  t notin Tmp1 &  t in Tmp2 ))
& all1 t: t<=$ => ((t in AS <=> A) & (t in BS <=> B))
;

pred BUSI(var0 init, var2 feedback, var2 feedin, var1 $)=
  (0 in feedin <=> init)
& (all1 t: (t>0 & t<=$) => ( t in feedin <=> t-1 in feedback));










 pred VNA(var0 A0,A1,A2,A3,A4,A5,A6,A7,B0,B1,B2,B3,B4,B5,B6,B7,var2 S0,S1,S2,S3,S4,S5,S6,S7,S8,var1 $)=
ex2 U9: ex0 A8, B8:
(A8<=>false) & (B8<=>false) &
ex2 Y8: (BUSI(B8, S8, Y8,$) &
ex2 X8: (HA(X8, Y8, S8, U9, $) &
ex2 U8: (BUSI(A8, U8, X8,$) &
ex2 Y7: (BUSI(B7, S7, Y7,$) &
ex2 X7: (HA(X7, Y7, S7, U8, $) &
ex2 U7: (BUSI(A7, U7, X7,$) &
ex2 Y6: (BUSI(B6, S6, Y6,$) &
ex2 X6: (HA(X6, Y6, S6, U7, $) &
ex2 U6: (BUSI(A6, U6, X6,$) &
ex2 Y5: (BUSI(B5, S5, Y5,$) &
ex2 X5: (HA(X5, Y5, S5, U6, $) &
ex2 U5: (BUSI(A5, U5, X5,$) &
ex2 Y4: (BUSI(B4, S4, Y4,$) &
ex2 X4: (HA(X4, Y4, S4, U5, $) &
ex2 U4: (BUSI(A4, U4, X4,$) &
ex2 Y3: (BUSI(B3, S3, Y3,$) &
ex2 X3: (HA(X3, Y3, S3, U4, $) &
ex2 U3: (BUSI(A3, U3, X3,$) &
ex2 Y2: (BUSI(B2, S2, Y2,$) &
ex2 X2: (HA(X2, Y2, S2, U3, $) &
ex2 U2: (BUSI(A2, U2, X2,$) &
ex2 Y1: (BUSI(B1, S1, Y1,$) &
ex2 X1: (HA(X1, Y1, S1, U2, $) &
ex2 U1: (BUSI(A1, U1, X1,$) &
ex2 Y0: (BUSI(B0, S0, Y0,$) &
ex2 X0: (HA(X0, Y0, S0, U1, $) &
ex2 U0: (BUSI(A0, U0, X0,$) &
all1 t: (t<$ => t notin U0))))))))))))))))))))))))))));
pred ccadd(var0 A0,A1,A2,A3,A4,A5,A6,A7,B0,B1,B2,B3,B4,B5,B6,B7,var2 S0,S1,S2,S3,S4,S5,S6,S7,S8,var1 $)=
ex2 C0: (all1 t: (t<=$ => t notin C0) &
ex2 C1: ( FA(A0, B0, C0, S0, C1, $) &
ex2 C2: ( FA(A1, B1, C1, S1, C2, $) &
ex2 C3: ( FA(A2, B2, C2, S2, C3, $) &
ex2 C4: ( FA(A3, B3, C3, S3, C4, $) &
ex2 C5: ( FA(A4, B4, C4, S4, C5, $) &
ex2 C6: ( FA(A5, B5, C5, S5, C6, $) &
ex2 C7: ( FA(A6, B6, C6, S6, C7, $) &
ex2 C8: ( FA(A7, B7, C7, S7, C8, $) &
(all1 t: t<=$ => (t in S8<=> t in C8)))))))))));

var1 $;
$ = 9 & all0 A0,A1,A2,A3,A4,A5,A6,A7,B0,B1,B2,B3,B4,B5,B6,B7,dummy: all2 S0,S1,S2,S3,S4,S5,S6,S7,S8,T0,T1,T2,T3,T4,T5,T6,T7,T8,dummy2:
((VNA(A0,A1,A2,A3,A4,A5,A6,A7,B0,B1,B2,B3,B4,B5,B6,B7,S0,S1,S2,S3,S4,S5,S6,S7,S8,9) &
ccadd(A0,A1,A2,A3,A4,A5,A6,A7,B0,B1,B2,B3,B4,B5,B6,B7,T0,T1,T2,T3,T4,T5,T6,T7,T8,9))
=>( ( $ in S0 <=> $ in T0) &
( $ in S1 <=> $ in T1) &
( $ in S2 <=> $ in T2) &
( $ in S3 <=> $ in T3) &
( $ in S4 <=> $ in T4) &
( $ in S5 <=> $ in T5) &
( $ in S6 <=> $ in T6) &
( $ in S7 <=> $ in T7) &
( $ in S8 <=> $ in T8) &
true)) ;
