/* pred inorder(pointer x:Node) = 
  allpos p of Node: x<next*>p & p.next!=null => p.next_ge=true;

pred inorder2(pointer x,y:Node) = 
  (y=null => inorder(x)) &
  (y!=null => allpos p of Node: x<next*>p & p<next.next*>y => p.next_ge=true);

pred consistent(pointer x:Node) = 
  allpos p of Node: reach(p,x) & p.next!=null => p.next_ge | p.next_le; */

/* proc bubblesort(data head:Node):Node
[true]
{
  pointer h,p,c,cn,t:Node;
  bool change;
  change := true;

  
  while [sll(head,end) /\ (!change => inorder(h))] (change) {
            
    p := null;
    change := false;
    c := h;
    cn := c.next;
    
    while [sll(head,end) /\ c != null /\ cn=c.next /\ (c!=head => p.next=c) /\ (c=head => p=null) /\ reach(head, c) /\ (!change => inorder2(h,c))]
          (cn!=null) {
      if (! c.value <= cn.value) {
        t := cn.next;

        change = true;
        c.next = t;
        cn.next = c;

	if (p=null) head:=cn;
        else p.next:=cn;
        
        p = cn;
        cn = t;
      }
      else {
        p = c;
        c = cn;
        cn = c.next;
      }
    }
  }
  return h;
}*/



ws1s;
var2 $ where ~ex1 p where true: p notin $ & p+1 in $;
allpos $;
defaultwhere1(p) = p in $;
defaultwhere2(P) = P sub $ ;

var0 change,change1, pc1,pc12;
var1 head, end, p, c, cn;



var1 t, head1, cn1, p1;


macro next(var1 x, var1 y) =
	head<=x & x+1=y & y<=end;
macro next1(var1 x, var1 y) =
	(x~=c & x~=cn & next(x,y)) | (x=c & y=t) | (x=cn & y=c) ;

macro close(var1 x, var1 y, var2 M) =
	x<y & (~ex1 z: (z in M & x<z & z<y)) ;
macro next'(var1 x, var1 y, var2 M) =
	close(x, y, M) & head<=x & y<=end ;
macro next1'(var1 x, var1 y, var2 M) =
	(x~=c & x~=cn & next'(x,y,M)) | (x=c & y=t) | (x=cn & y=c) ;

macro reach(var1 x, var1 y) =
	head<=x & x<=y & y<=end ;
macro reach1(var1 x, var1 y) =
	all2 P: ((x in P &
		all1 z1,z2: ((z1 in P & next1(z1,z2)) => z2 in P)) => y in P) ;
macro reach1'(var1 x, var1 y, var2 M) =
		all2 P where P sub M: ((x in P &
		all1 z1,z2 where z1 in M & z2 in M: ((z1 in P & next1'(z1,z2,M)) => z2 in P)) => y in P) ;



macro sll(var1 h, var1 t) =
	(reach(h, t)) &
	(all1 x: (~reach(x, h) | x=h)) &
	(all1 x: (~reach(t, x) | x=t)) &
	(all1 x,y: (reach(h, x) & reach(h, y) & reach(x, t) & reach(y, t))
			=> (reach(x, y) | reach(y, x)));
macro sll'(var1 h, var1 t, var2 M) =
	(reach(h, t)) &
	(all1 x where x in M: (~reach(x, h) | x=h)) &
	(all1 x where x in M: (~reach(t, x) | x=t)) &
	(all1 x,y where x in M & y in M: (reach(h, x) & reach(h, y) & reach(x, t) & reach(y, t))
			=> (reach(x, y) | reach(y, x)));

macro sll1(var1 h, var1 t) =
	(reach1(h, t)) &
	(all1 x: (~reach1(x, h) | x=h)) &
	(all1 x: (~reach1(t, x) | x=t)) &
	(all1 x,y: (reach1(h, x) & reach1(h, y) & reach1(x, t) & reach1(y, t))
			=> (reach1(x, y) | reach1(y, x)));
macro sll1'(var1 h, var1 t, var2 M) =
	(reach1'(h, t, M)) &
	(all1 x where x in M: (~reach1'(x, h, M) | x=h)) &
	(all1 x where x in M: (~reach1'(t, x, M) | x=t)) &
	(all1 x,y where x in M & y in M: (reach1'(h, x, M) & reach1'(h, y, M) & reach1'(x, t, M) & reach1'(y, t, M))
			=> (reach1'(x, y, M) | reach1'(y, x, M)));


/*
pc1 := c.data <= cn.data
*/



var1 exdv1, exdv2;

macro validmodel =
	(head = 0 &
	head ~= end &
        next(cn,t) &
	next(c,cn) &
	(c~=head => next(p,c)) &
	(c=head => p=end) &
	head1 = cn &
        change1 & 
        p1 = cn &
        cn1 = t &
	t <= end &
	~ex1 x: (end<x));


macro first(var1 x, var2 M) =
	x in M & ~ex1 y: (y in M & y<x) ;
macro second(var1 x, var2 M) =
	x in M & ex1 y: (x~=y & first(y, M) & all1 z: (z notin M | z=y | x<=z)) ;

macro validmodel'(var2 M) =
	((0 in M & head in M & end in M) &
	(p in M & c in M & cn in M & t in M) &
	(p1 in M & cn1 in M & head1 in M) &
	(exdv1 in M & exdv2 in M) &
	first(head, M) &
	head~=end &
        next'(cn,t,M) &
	next'(c,cn,M) &
	(c~=head => next'(p,c,M)) &
	(c=head => p=end) &
	head1 = cn &
        change1 & 
        p1 = cn &
        cn1 = t &
	t <= end &
	~ex1 x where x in M: (end<x));



/* macro preconsistent(var1 alldv1, var1 alldv2, var0 p11) =
	alldv1=alldv2 | ~reach(alldv1, alldv2) | ~reach(alldv2,h) | p11;
macro postconsistent = exdv1~=exdv2 & reach1(exdv1, exdv2) & reach1(exdv2,h1) & pc12;
macro preconsistent'(var1 alldv1, var1 alldv2, var0 p11, var2 M) =
	alldv1=alldv2 | ~reach(alldv1, alldv2) | ~reach(alldv2,h) | p11;
macro postconsistent'(var2 M) = exdv1~=exdv2 & reach1'(exdv1, exdv2, M) & reach1'(exdv2,h1,M) & pc12; */


macro preinorder2(var1 alldv1, var1 alldv2, var0 p11) =
	alldv1=alldv2 | ~reach(alldv1, alldv2) | ~reach(head,alldv1) | ~reach(alldv2,c) | p11;
macro postinorder2 = exdv1~=exdv2 & reach1(exdv1, exdv2) & reach1(head1,exdv1) & reach1(exdv2,c) & pc12;
macro preinorder2'(var1 alldv1, var1 alldv2, var0 p11, var2 M) =
	alldv1=alldv2 | ~reach(alldv1, alldv2) | ~reach(head,alldv1) | ~reach(alldv2,c) | p11;
macro postinorder2'(var2 M) = exdv1~=exdv2 & reach1'(exdv1, exdv2, M) & reach1'(head1,exdv1,M) & reach1'(exdv2,c,M) & pc12;



/* to check:
innerloopinv(prev, curr) & cn ~= end & ~pc1 & p=end & ~innerloopinv(prev1, curr1) */

/* macroefined data macroicates:
	pc1 := key(c) <= key(cn)
	p11 := key(alldv1)<=key(alldv2)
	pc12 := ~ key(exdv1)<=key(exdv2)
	p21 := key(alldv3)<=key(alldv4)
	pc22 := ~ key(exdv4)<=key(exdv4)
*/

macro precondition(var1 alldv1, var1 alldv2, var0 p11) =
	
	sll(head, end) & c ~= end & next(c,cn) & (c~=head => next(p,c)) & (c=head => p=end) & reach(head, c) &
	(change | preinorder2(alldv1,alldv2,p11)) &
	cn ~= end & ~pc1 & p=end ;

macro precondition'(var1 alldv1, var1 alldv2, var0 p11, var2 M) =

	sll'(head, end, M) & c ~= end & next'(c,cn,M) & (c~=head => next'(p,c,M)) & (c=head => p=end) & reach(head, c) &
	(change | preinorder2'(alldv1,alldv2,p11,M)) &
	cn ~= end & ~pc1 & p=end ;


macro negpostcondition =
	
	~sll1(head1, end) | c=end | ~next1(c,cn1) | (c~=head1 & ~next1(p1,c)) | (c=head1 & p1~=end) | ~reach1(head1, c) |
	(~change1 & postinorder2) ;

macro negpostcondition'(var2 M) =

	~sll1'(head1, end, M) | c=end | ~next1'(c,cn1,M) | (c~=head1 & ~next1'(p1,c,M)) | (c=head1 & p1~=end) | ~reach1'(head1,c,M) |
	(~change1 & postinorder2'(M)) ;




macro minimalmodel =
	~ex2 M where M~=$:(
	validmodel'(M) &
	all1 dv1,dv2 where dv1 in M & dv2 in M : (
		all0 p11: (
			((~precondition(dv1,dv2,p11) | precondition'(dv1,dv2,p11,M)) | ~negpostcondition) &
			(~precondition(dv1,dv2,p11) | (~negpostcondition | negpostcondition'(M)))
		)));

macro existmodel =
	validmodel &
	all1 alldv1,alldv2 : (
		ex0 p11: (
			precondition(alldv1,alldv2,p11) &
			negpostcondition &
			((alldv1=exdv1 & alldv2=exdv2) => (pc12 <=> ~p11)) &
			((c=exdv1 & cn=exdv2) => (pc1 <=> ~pc12)) &
			((c=alldv1 & cn=alldv2) => (pc1 <=> p11))
		));


export("bubblesort-innerloop", existmodel & minimalmodel);


