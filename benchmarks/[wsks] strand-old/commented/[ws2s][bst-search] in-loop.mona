/*R := binary search tree, with two binary relations, left and right, a variable root*/

/*D := a binary relation reach is defined as follows:
	reach(x, y) := \exist2 S . (x \in S /\ y \in S /\ \forall z . (z \in S => exist u . ((left(z, u) \/ right(z, u)) /\ u \in S)))*/

/*F := a single data field called key*/

/*P := left-branch /\ right-branch /\ existk
	sorted := \forall x y z . (((left(x, z) /\ reach(z, y)) => key(x) > key(y)) | ((right(x, z) /\ reach(z, y)) => key(x) < key(y)))
	existk := \exist x . (reach(r, x) & key(x) == k)*/

/*S :=
Node bstSearch(Node root, int k){

	Node curr = root;

	(loop invariant: ex1 x: reach(curr, x) & key(x) == k)

	while (key(curr) =/= k /\ curr =/= nil){
		if (key(curr) > k) curr = left(curr);
		else curr = right(curr);
	}
}*/

/*Q := binarytree /\ left-branch /\ right-branch /\ key(curr) == k
	binarytree := fork /\ no-merge /\ antisymmetry
	fork := \forall x y z . ((left(x, y) /\ right(x, z)) => y =/= z)
	no-merge := \forall x y z . ((x --> z /\ y --> z) => (x --> y \/ y --> x))
	antisymmetry := \forall x y . (~reach(x, y) \/ ~reach(y, x))*/

ws2s;


macro validmodel(var2 $, var1 curr, var1 curr1, var1 exdv1, var1 exdv2, var1 anotherk, var0 pc1, var0 pc2) =
	all1 p where true: (p in $) => ((p^ in $) | (p^=p)) &
	root.1 in $ & root.0 in $ & curr in $ & curr1 in $ & exdv1 in $ & exdv2 in $ & anotherk in $ &
	root.1.0 notin $ & root.1.1 notin $ &
	root.0<=curr &
	((pc1 & curr1=curr.0) | (pc2 & curr1=curr.1)) ;


macro leftchild(var1 x, var1 y, var2 M) =
	x.0<=y & (~ex1 z: z in M & x<z & z<y) ;
macro rightchild(var1 x, var1 y, var2 M) =
	x.1<=y & (~ex1 z: z in M & x<z & z<y) ;

macro left(var2 $, var1 x, var1 y) =
	(root.0<=x & y=x.0 & y in $) | (root.0<=x & x.0 notin $ & y=root);
macro left'(var2 $, var1 x, var1 y, var2 M) =
	(root.0<=x & leftchild(x,y,M)) | (root.0<=x & (~ex1 z where z in M: (leftchild(x,z,M))) & y=root);

macro right(var2 $, var1 x, var1 y) =
	(root.0<=x & y=x.1 & y in $) | (root.0<=x & x.1 notin $ & y=root);
macro right'(var2 $, var1 x, var1 y, var2 M) =
	(root.0<=x & rightchild(x,y,M)) | (root.0<=x & (~ex1 z where z in M: (rightchild(x,z,M))) & y=root);

macro reach(var2 $, var1 x, var1 y) =
	((root.0<=x & x<=y & y in $) | (root.0<=x & y=root) | (x=root & y=root)) ;

pred fork(var2 $) =
	all1 x,y,z: ((reach($,root.0,x) & reach($,root.0,y) & reach($,root.0,z)) => ((left($,x, y) & right($,x, z) & y~=root & z~=root) => y ~= z));
pred fork'(var2 $, var2 M) =
	all1 x,y,z: (x in M & y in M & z in M & reach($,root.0,x) & reach($,root.0,y) & reach($,root.0,z)) => ((left'($,x, y, M) & right'($,x, z, M) & y~=root & z~=root) => y ~= z);
pred nomerge(var2 $) =
	all1 x,y,z: (reach($,root.0,x) & reach($,root.0,y) & reach($,root.0,z) & z~=root) => ((reach($,x, z) & reach($,y,z)) => (reach($,x, y) | reach($,y, x)));
pred nomerge'(var2 $, var2 M) =
	all1 x,y,z: (x in M & y in M & z in M & reach($,root.0,x) & reach($,root.0,y) & reach($,root.0,z) & z~=root) => ((reach($,x, z) & reach($,y,z)) => (reach($,x, y) | reach($,y, x)));
pred antisymmetry(var2 $) =
	all1 x,y: (reach($,root.0,x) & reach($,root.0,y) & x ~= y) => ~(reach($,x, y) & reach($,y, x));
pred antisymmetry'(var2 $, var2 M) =
	all1 x,y: (x in M & y in M & reach($,root.0,x) & reach($,root.0,y) & x ~= y) => ~(reach($,x, y) & reach($,y, x));

pred binarytree(var2 $) =
	fork($) & nomerge($) & antisymmetry($);
pred binarytree'(var2 $, var2 M) =
	fork'($,M) & nomerge'($,M) & antisymmetry'($,M);

macro lcp(var2 $, var1 x, var1 y, var1 z) =
	z<=x & z<=y & (~ex1 u where u in $ : (u<=x & u<=y & z<u)) ;

macro validmodel'(var2 $, var1 curr, var1 curr1, var1 exdv1, var1 exdv2, var1 anotherk, var0 pc1, var0 pc2, var2 M) = 
	(root in M & root.1 in M & root.0 in M & curr in M & curr1 in M) &
	(exdv1 in M & exdv2 in M & anotherk in M) &
	(all1 x,y,z where x in $ & y in $ & z in $ : (x in M & y in M & lcp($,x,y,z)) => z in M);

/* to check:
	(bst & loopinv & key(curr) ~= key(ak) & curr notin nil) & ~(bst & loopinv)) */

/* macroefined data macroicates:
	pc1 := key(curr) > key(ak)
	pc2 := key(curr) <= key(ak)
	pc3 := key(curr) ~= key(ak)
	p11 := key(alldv1) > key(alldv2)
	pc12 := key(exdv1) <= key(exdv2)
	p21 := key(alldv1) < key(alldv2)
	pc22 := key(exdv1) >= key(exdv2)
	p3 := key(alldv3) ~= key(ak)
	pc4 := key(anotherk) = key(ak)
*/

macro presorted(var2 $, var1 alldv1, var1 alldv2, var0 p11, var0 p21) =
	alldv2=root | all1 z where z in $ : (((left($, alldv1, z) & reach($, z, alldv2)) => p11) & ((right($, alldv1, z) & reach($, z, alldv2)) => p21));
macro presorted'(var2 $, var1 alldv1, var1 alldv2, var0 p11, var0 p21, var2 M) =
	alldv2=root | all1 z where z in M : (((left'($,alldv1, z, M) & reach($, z, alldv2)) => p11) & ((right'($,alldv1, z, M) & reach($, z, alldv2)) => p21));

macro postsorted(var2 $, var1 exdv1, var1 exdv2, var0 pc12, var0 pc22) =
	exdv2~=root & ex1 z where z in $ : ((left($,exdv1,z) & reach($,z,exdv2) & pc12) | (right($,exdv1,z) & reach($,z,exdv2) & pc22)) ;
macro postsorted'(var2 $, var1 exdv1, var1 exdv2, var0 pc12, var0 pc22, var2 M) =
	exdv2~=root & ex1 z where z in M : ((left'($,exdv1,z,M) & reach($,z,exdv2) & pc12) | (right'($,exdv1,z,M) & reach($,z,exdv2) & pc22)) ;

macro preloopinv(var2 $, var1 curr, var1 anotherk, var0 pc4) = anotherk~=root & pc4 & reach($, curr, anotherk) ;

macro postloopinv(var2 $, var1 curr1, var1 alldv3, var0 p3) = ~reach($,curr1,alldv3) | p3 | alldv3=root ;

macro precondition(var2 $, var1 curr, var1 curr1, var1 exdv1, var1 exdv2, var1 anotherk, var0 pc1, var0 pc2, var0 pc3, var0 pc4, var0 pc12, var0 pc22, var1 alldv1, var1 alldv2, var1 alldv3, var0 p11, var0 p21, var0 p3) =
	validmodel($,curr,curr1,exdv1,exdv2,anotherk,pc1,pc2) & presorted($,alldv1,alldv2,p11,p21) & preloopinv($,curr,anotherk,pc4) & binarytree($) & pc3 & curr~=root ;
macro precondition'(var2 $, var1 curr, var1 curr1, var1 exdv1, var1 exdv2, var1 anotherk, var0 pc1, var0 pc2, var0 pc3, var0 pc4, var0 pc12, var0 pc22, var1 alldv1, var1 alldv2, var1 alldv3, var0 p11, var0 p21, var0 p3, var2 M) =
	presorted'($,alldv1,alldv2,p11,p21,M) & preloopinv($,curr,anotherk,pc4) & binarytree'($,M) & pc3 & curr~=root ;


macro negpostcondition(var2 $, var1 curr, var1 curr1, var1 exdv1, var1 exdv2, var1 anotherk, var0 pc1, var0 pc2, var0 pc3, var0 pc4, var0 pc12, var0 pc22, var1 alldv1, var1 alldv2, var1 alldv3, var0 p11, var0 p21, var0 p3) =
	validmodel($,curr,curr1,exdv1,exdv2,anotherk,pc1,pc2) & (postsorted($,exdv1,exdv2,pc12,pc22) | ~binarytree($) | postloopinv($,curr1,alldv3,p3)) ;
macro negpostcondition'(var2 $, var1 curr, var1 curr1, var1 exdv1, var1 exdv2, var1 anotherk, var0 pc1, var0 pc2, var0 pc3, var0 pc4, var0 pc12, var0 pc22, var1 alldv1, var1 alldv2, var1 alldv3, var0 p11, var0 p21, var0 p3, var2 M) =
	postsorted'($,exdv1,exdv2,pc12,pc22,M) | ~binarytree'($,M) | postloopinv($,curr1,alldv3,p3) ;



macro minimalmodel(var2 $, var1 curr, var1 curr1, var1 exdv1, var1 exdv2, var1 anotherk, var0 pc1, var0 pc2, var0 pc3, var0 pc4, var0 pc12, var0 pc22) =
	~ex2 M where M sub $ & M~=$:(
	validmodel'($,curr,curr1,exdv1,exdv2,anotherk,pc1,pc2,M) &
	all1 dv1,dv2,dv3: (
		(dv1 in M & dv2 in M & dv3 in M) =>
		(all0 p11,p21,p3: (
			((~precondition($,curr,curr1,exdv1,exdv2,anotherk,pc1,pc2,pc3,pc4,pc12,pc22,dv1,dv2,dv3,p11,p21,p3) | precondition'($,curr,curr1,exdv1,exdv2,anotherk,pc1,pc2,pc3,pc4,pc12,pc22,dv1,dv2,dv3,p11,p21,p3,M)) | ~negpostcondition($,curr,curr1,exdv1,exdv2,anotherk,pc1,pc2,pc3,pc4,pc12,pc22,dv1,dv2,dv3,p11,p21,p3)) &
			(~precondition($,curr,curr1,exdv1,exdv2,anotherk,pc1,pc2,pc3,pc4,pc12,pc22,dv1,dv2,dv3,p11,p21,p3) | (~negpostcondition($,curr,curr1,exdv1,exdv2,anotherk,pc1,pc2,pc3,pc4,pc12,pc22,dv1,dv2,dv3,p11,p21,p3) | negpostcondition'($,curr,curr1,exdv1,exdv2,anotherk,pc1,pc2,pc3,pc4,pc12,pc22,dv1,dv2,dv3,p11,p21,p3,M)))
		))));



macro existmodel(var2 $, var1 curr, var1 curr1, var1 exdv1, var1 exdv2, var1 anotherk, var0 pc1, var0 pc2, var0 pc3, var0 pc4, var0 pc12, var0 pc22) =
	validmodel($,curr,curr1,exdv1,exdv2,anotherk,pc1,pc2) &
	(pc1 <=> ~pc2) &
	((curr=anotherk) => (pc3 <=> ~pc4)) &
	all1 alldv1,alldv2,alldv3 where alldv1 in $ & alldv2 in $ & alldv3 in $ : (
		ex0 p11,p21,p3: (
			precondition($,curr,curr1,exdv1,exdv2,anotherk,pc1,pc2,pc3,pc4,pc12,pc22,alldv1,alldv2,alldv3,p11,p21,p3) &
			negpostcondition($,curr,curr1,exdv1,exdv2,anotherk,pc1,pc2,pc3,pc4,pc12,pc22,alldv1,alldv2,alldv3,p11,p21,p3) &
			((anotherk=alldv3) => (pc4 <=> ~p3)) &
			((alldv1=exdv1 & alldv2=exdv2) => ((pc12 <=> ~p11) & (pc22 <=> ~p21)))

		));

var2 $;
var1 curr,curr1,exdv1,exdv2,anotherk;
var0 pc1,pc2,pc3,pc4,pc12,pc22;

existmodel($,curr,curr1,exdv1,exdv2,anotherk,pc1,pc2,pc3,pc4,pc12,pc22) & minimalmodel($,curr,curr1,exdv1,exdv2,anotherk,pc1,pc2,pc3,pc4,pc12,pc22) ;


