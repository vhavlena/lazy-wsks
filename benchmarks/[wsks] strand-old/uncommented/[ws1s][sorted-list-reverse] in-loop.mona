
ws1s;
var2 $ where ~ex1 p where true: p notin $ & p+1 in $;
allpos $;
defaultwhere1(p) = p in $;
defaultwhere2(P) = P sub $ ;

var0 pc12;
var1 head, nil, end, newhead, t, newhead1, head1;

macro next(var1 x, var1 y) =
	(head<=x & x+1=y & y<=nil) |
	(nil<=y & y+1=x & x<=newhead) ;
macro next1(var1 x, var1 y) =
	(x~=newhead1 & next(x,y)) | (x=newhead1 & y=t) ;
macro close(var1 x, var1 y, var2 M) =
	x<y & (~ex1 z: (z in M & x<z & z<y)) ;
macro next'(var1 x, var1 y, var2 M) =
	(close(x, y, M) & head<=x & y<=nil) |
	(close(y, x, M) & nil<=y & x<=newhead) ;
macro next1'(var1 x, var1 y, var2 M) =
	(x~=newhead1 & next'(x,y,M)) | (x=newhead1 & y=t) ;
macro reach(var1 x, var1 y) =
	(head<=x & x<=y & y<=nil) |
	(nil<=y & y<=x & x<=newhead) ;
macro reach1(var1 x, var1 y) =
	all2 P: ((x in P &
		all1 z1,z2: ((z1 in P & next1(z1,z2)) => z2 in P)) => y in P) ;
macro reach1'(var1 x, var1 y, var2 M) =
	all2 P where P sub M: ((x in P &
		all1 z1,z2 where z1 in M & z2 in M: ((z1 in P & next1'(z1,z2,M)) => z2 in P)) => y in P) ;

macro sll(var1 h, var1 t) =
	(reach(h, t)) &
	(all1 x: ~reach(x, h) | x=h | h=nil) &
	(all1 x: ~reach(t, x) | x=t) &
	(all1 x,y: (reach(h, x) & reach(h, y) & reach(x, t) & reach(y, t))
			=> (reach(x, y) | reach(y, x)));
macro sll'(var1 h, var1 t, var2 M) =
	(reach(h, t)) &
	(all1 x: x notin M | ~reach(x, h) | x=h | h=nil) &
	(all1 x: x notin M | ~reach(t, x) | x=t) &
	(all1 x,y: (x in M & y in M & reach(h, x) & reach(h, y) & reach(x, t) & reach(y, t))
			=> (reach(x, y) | reach(y, x)));
macro sll1(var1 h, var1 t) =
	(reach1(h, t)) &
	(all1 x: ~reach1(x, h) | x=h | h=nil) &
	(all1 x: ~reach1(t, x) | x=t) &
	(all1 x,y: (reach1(h, x) & reach1(h, y) & reach1(x, t) & reach1(y, t))
			=> (reach1(x, y) | reach1(y, x)));
macro sll1'(var1 h, var1 t, var2 M) =
	(reach1'(h, t, M)) &
	(all1 x: x notin M | ~reach1'(x, h, M) | x=h | h=nil) &
	(all1 x: x notin M | ~reach1'(t, x, M) | x=t) &
	(all1 x,y: (x in M & y in M & reach1'(h, x, M) & reach1'(h, y, M) & reach1'(x, t, M) & reach1'(y, t, M))
			=> (reach1'(x, y, M) | reach1'(y, x, M)));

macro twolists(var1 h1, var1 h2, var1 n) =
	(sll(h1, n) & sll(h2, n)) &
	(all1 y: ((reach(h1, y) & reach(h2, y)) => y=n)) ;
macro twolists'(var1 h1, var1 h2, var1 n, var2 M) =
	(sll'(h1, n, M) & sll'(h2, n, M)) &
	(all1 y where y in M: ((reach(h1, y) & reach(h2, y)) => y=n)) ;
macro twolists1(var1 h1, var1 h2, var1 n) =
	(sll1(h1, n) & sll1(h2, n)) &
	(all1 y: ((reach1(h1, y) & reach1(h2, y)) => y=n)) ;
macro twolists1'(var1 h1, var1 h2, var1 n, var2 M) =
	(sll1'(h1, n, M) & sll1'(h2, n, M)) &
	(all1 y where y in M: ((reach1'(h1, y, M) & reach1'(h2, y, M)) => y=n)) ;

var1 exdv1, exdv2;

macro validmodel =
	(head = 0 &
	head <= nil &
	nil <= newhead &
	head~=newhead &
	newhead = end &
	t = newhead &
	newhead1 = head &
	next(head, head1) &
	head1 <= end &
	exdv1 <= end &
	exdv2 <= end &
	~ex1 x: (end<x));

macro first(var1 x, var2 M) =
	x in M & ~ex1 y: (y in M & y<x) ;

macro validmodel'(var2 M) =
	((head in M & nil in M & end in M) &
	(newhead in M & t in M & newhead1 in M & head1 in M) &
	(exdv1 in M & exdv2 in M) &
	first(head, M) &
	head <= nil &
	nil <= newhead &
	newhead = end &
	t = newhead &
	newhead1 = head &
	next'(head, head1, M) &
	head1 <= end &
	exdv1 <= end &
	exdv2 <= end &
	~ex1 x where x in M: (end<x));

macro presorted(var1 alldv1, var1 alldv2, var0 p11) =
	alldv1=alldv2 | ~reach(head,alldv1) | ~reach(alldv1, alldv2) | alldv2=nil | p11;
macro presorted'(var1 alldv1, var1 alldv2, var0 p11, var2 M) =
	alldv1=alldv2 | ~reach(head,alldv1) | ~reach(alldv1, alldv2) | alldv2=nil | p11;

macro postsorted = 
	exdv1~=exdv2 & reach1(head1,exdv1) & reach1(exdv1, exdv2) & exdv2~=nil & pc12;
macro postsorted'(var2 M) = 
	exdv1~=exdv2 & reach1'(head1,exdv1,M) & reach1'(exdv1, exdv2, M) & exdv2~=nil & pc12;

macro prerevsorted(var1 alldv1, var1 alldv2, var0 p11) = alldv2=alldv1 | ~reach(newhead,alldv2) | ~reach(alldv2, alldv1) | alldv1=nil | p11;
macro prerevsorted'(var1 alldv1, var1 alldv2, var0 p11, var2 M) = alldv2=alldv1 | ~reach(newhead,alldv2) |  ~reach(alldv2, alldv1) | alldv1=nil | p11;
macro postrevsorted = exdv1~=exdv2 & reach1(newhead1,exdv2) & reach1(exdv2, exdv1) & exdv1~=nil & pc12;
macro postrevsorted'(var2 M) = exdv1~=exdv2 & reach1'(newhead1,exdv2,M) & reach1'(exdv2, exdv1, M) & exdv1~=nil & pc12;

macro predisjoint(var1 alldv1, var1 alldv2, var0 p11) = alldv1=nil | alldv2=nil | ~reach(newhead,alldv1) | ~reach(head,alldv2) | p11 ;
macro predisjoint'(var1 alldv1, var1 alldv2, var0 p11, var2 M) = alldv1=nil | alldv2=nil | ~reach(newhead,alldv1) | ~reach(head,alldv2) | p11 ;

macro postdisjoint = exdv1~=nil & exdv2~=nil & reach1(newhead1,exdv1) & reach1(head1,exdv2) & pc12 ;
macro postdisjoint'(var2 M) = exdv1~=nil & exdv2~=nil & reach1'(newhead1,exdv1,M) & reach1'(head1,exdv2,M) & pc12 ;

macro preloopinv(var1 alldv1, var1 alldv2, var0 p11) = 
	twolists(head, newhead, nil) & presorted(alldv1,alldv2,p11) & prerevsorted(alldv1,alldv2,p11) & predisjoint(alldv1,alldv2,p11) ;
macro preloopinv'(var1 alldv1, var1 alldv2, var0 p11, var2 M) = 
	twolists'(head, newhead, nil, M) & presorted'(alldv1,alldv2,p11,M) & prerevsorted'(alldv1,alldv2,p11,M) & predisjoint'(alldv1,alldv2,p11,M) ;

macro precondition(var1 alldv1, var1 alldv2, var0 p11) =
	preloopinv(alldv1,alldv2,p11) & head~=nil ;
macro precondition'(var1 alldv1, var1 alldv2, var0 p11, var2 M) =
	preloopinv'(alldv1,alldv2,p11,M) & head~=nil ;

macro negpostcondition(var1 alldv1, var1 alldv2, var0 p11) = 
	~twolists1(head1, newhead1, nil) | postsorted | postrevsorted | postdisjoint ;
macro negpostcondition'(var1 alldv1, var1 alldv2, var0 p11, var2 M) =
	~twolists1'(head1, newhead1, nil, M) | postsorted'(M) | postrevsorted'(M) | postdisjoint'(M) ;

macro minimalmodel =
	~ex2 M where M~=$:(
	validmodel'(M) &
	all1 dv1,dv2 where dv1 in M & dv2 in M : (
		all0 p11: (
			((~precondition(dv1,dv2,p11) | precondition'(dv1,dv2,p11,M)) | ~negpostcondition(dv1,dv2,p11)) &
			(~precondition(dv1,dv2,p11) | (~negpostcondition(dv1,dv2,p11) | negpostcondition'(dv1,dv2,p11,M)))
		)));

macro existmodel =
	validmodel &
	all1 alldv1,alldv2 : (
		ex0 p11: (
			precondition(alldv1,alldv2,p11) &
			negpostcondition(alldv1,alldv2,p11) &
			((alldv1=exdv1 & alldv2=exdv2) => (pc12 <=> ~p11))
		));

export("sllrev-loop", existmodel & minimalmodel);

