
ws2s;

macro validmodel(var2 $, var1 curr, var1 exdv1, var1 exdv2, var1 nodek) = 
	all1 p where true: (p in $) => ((p^ in $) | (p^=p)) &
	root.1 in $ & root.0 in $ & curr in $ & exdv1 in $ & exdv2 in $ & nodek in $ &
	root.1.0 notin $ & root.1.1 notin $ &
	curr=root.0 ;

macro leftchild(var1 x, var1 y, var2 M) =
	x.0<=y & (~ex1 z: z in M & x<z & z<y) ;
macro rightchild(var1 x, var1 y, var2 M) =
	x.1<=y & (~ex1 z: z in M & x<z & z<y) ;

macro left(var2 $, var1 x, var1 y) =
	(root.0<=x & y=x.0 & y in $) | (root.0<=x & x.0 notin $ & y=root);
macro left'(var2 $, var1 x, var1 y, var2 M) =
	(root.0<=x & leftchild(x,y,M)) | (root.0<=x & (~ex1 z where z in M: (leftchild(x,z,M))) & y=root);

macro right(var2 $, var1 x, var1 y) =
	(root.0<=x & y=x.1 & y in $) | (root.0<=x & x.1 notin $ & y=root);
macro right'(var2 $, var1 x, var1 y, var2 M) =
	(root.0<=x & rightchild(x,y,M)) | (root.0<=x & (~ex1 z where z in M: (rightchild(x,z,M))) & y=root);

macro reach(var2 $, var1 x, var1 y) =
	((root.0<=x & x<=y & y in $) | (root.0<=x & y=root) | (x=root & y=root)) ;

pred fork(var2 $) =
	all1 x,y,z: ((reach($,root.0,x) & reach($,root.0,y) & reach($,root.0,z)) => ((left($,x, y) & right($,x, z) & y~=root & z~=root) => y ~= z));
pred fork'(var2 $, var2 M) =
	all1 x,y,z: (x in M & y in M & z in M & reach($,root.0,x) & reach($,root.0,y) & reach($,root.0,z)) => ((left'($,x, y, M) & right'($,x, z, M) & y~=root & z~=root) => y ~= z);
pred nomerge(var2 $) =
	all1 x,y,z: (reach($,root.0,x) & reach($,root.0,y) & reach($,root.0,z) & z~=root) => ((reach($,x, z) & reach($,y,z)) => (reach($,x, y) | reach($,y, x)));
pred nomerge'(var2 $, var2 M) =
	all1 x,y,z: (x in M & y in M & z in M & reach($,root.0,x) & reach($,root.0,y) & reach($,root.0,z) & z~=root) => ((reach($,x, z) & reach($,y,z)) => (reach($,x, y) | reach($,y, x)));
pred antisymmetry(var2 $) =
	all1 x,y: (reach($,root.0,x) & reach($,root.0,y) & x ~= y) => ~(reach($,x, y) & reach($,y, x));
pred antisymmetry'(var2 $, var2 M) =
	all1 x,y: (x in M & y in M & reach($,root.0,x) & reach($,root.0,y) & x ~= y) => ~(reach($,x, y) & reach($,y, x));

pred binarytree(var2 $) =
	fork($) & nomerge($) & antisymmetry($);
pred binarytree'(var2 $, var2 M) =
	fork'($,M) & nomerge'($,M) & antisymmetry'($,M);

macro lcp(var2 $, var1 x, var1 y, var1 z) =
	z<=x & z<=y & (~ex1 u where u in $ : (u<=x & u<=y & z<u)) ;

macro validmodel'(var2 $, var1 curr, var1 exdv1, var1 exdv2, var1 nodek, var2 M) = 
	(root in M & root.1 in M & root.0 in M & curr in M) &
	(exdv1 in M & exdv2 in M & nodek in M) &
	curr=root.0 &
	(all1 x,y,z where x in $ & y in $ & z in $ : (x in M & y in M & lcp($,x,y,z)) => z in M);

macro preexistk(var2 $,var1 nodek,var0 pc3) = reach($,root.0,nodek) & pc3 & nodek~=root ;

macro presorted(var2 $, var1 alldv1, var1 alldv2, var0 p11, var0 p21) =
	alldv2=root | all1 z where z in $ : (((left($, alldv1, z) & reach($, z, alldv2)) => p11) & ((right($, alldv1, z) & reach($, z, alldv2)) => p21));
macro presorted'(var2 $, var1 alldv1, var1 alldv2, var0 p11, var0 p21, var2 M) =
	alldv2=root | all1 z where z in M : (((left'($,alldv1, z, M) & reach($, z, alldv2)) => p11) & ((right'($,alldv1, z, M) & reach($, z, alldv2)) => p21));

macro postsorted(var2 $, var1 exdv1, var1 exdv2, var0 pc12, var0 pc22) =
	exdv2~=root & ex1 z where z in $ : ((left($,exdv1,z) & reach($,z,exdv2) & pc12) | (right($,exdv1,z) & reach($,z,exdv2) & pc22)) ;
macro postsorted'(var2 $, var1 exdv1, var1 exdv2, var0 pc12, var0 pc22, var2 M) =
	exdv2~=root & ex1 z where z in M : ((left'($,exdv1,z,M) & reach($,z,exdv2) & pc12) | (right'($,exdv1,z,M) & reach($,z,exdv2) & pc22)) ;

macro postloopinv(var2 $, var1 curr, var1 alldv3, var0 p4) = ~reach($,curr,alldv3) | (p4 & alldv3~=root.1) | alldv3=root ;

macro precondition(var2 $, var1 curr, var1 exdv1, var1 exdv2, var1 nodek, var0 pc12, var0 pc22, var0 pc3, var1 alldv1, var1 alldv2, var1 alldv3, var0 p11, var0 p21, var0 p4) =
	validmodel($,curr,exdv1,exdv2,nodek) & presorted($,alldv1,alldv2,p11,p21) & preexistk($,nodek,pc3) & binarytree($)  ;
macro precondition'(var2 $, var1 curr, var1 exdv1, var1 exdv2, var1 nodek, var0 pc12, var0 pc22, var0 pc3, var1 alldv1, var1 alldv2, var1 alldv3, var0 p11, var0 p21, var0 p4, var2 M) =
	presorted'($,alldv1,alldv2,p11,p21,M) & preexistk($,nodek,pc3) & binarytree'($,M) ;

macro negpostcondition(var2 $, var1 curr, var1 exdv1, var1 exdv2, var1 nodek, var0 pc12, var0 pc22, var0 pc3, var1 alldv1, var1 alldv2, var1 alldv3, var0 p11, var0 p21, var0 p4) =
	validmodel($,curr,exdv1,exdv2,nodek) & (postsorted($,exdv1,exdv2,pc12,pc22) | postloopinv($,curr,alldv3,p4) | ~binarytree($)) ;
macro negpostcondition'(var2 $, var1 curr, var1 exdv1, var1 exdv2, var1 nodek, var0 pc12, var0 pc22, var0 pc3, var1 alldv1, var1 alldv2, var1 alldv3, var0 p11, var0 p21, var0 p4, var2 M) =
	postsorted'($,exdv1,exdv2,pc12,pc22,M) | postloopinv($,curr,alldv3,p4) | ~binarytree'($,M);

macro minimalmodel(var2 $, var1 curr, var1 exdv1, var1 exdv2, var1 nodek, var0 pc12, var0 pc22, var0 pc3) =
	~ex2 M where M sub $ & M~=$:(
	validmodel'($,curr,exdv1,exdv2,nodek,M) &
	all1 alldv1,alldv2,alldv3 where alldv1 in M & alldv2 in M & alldv3 in M : (
		all0 p11,p21,p4: (
			((~precondition($,curr,exdv1,exdv2,nodek,pc12,pc22,pc3,alldv1,alldv2,alldv3,p11,p21,p4) | precondition'($,curr,exdv1,exdv2,nodek,pc12,pc22,pc3,alldv1,alldv2,alldv3,p11,p21,p4,M)) | ~negpostcondition($,curr,exdv1,exdv2,nodek,pc12,pc22,pc3,alldv1,alldv2,alldv3,p11,p21,p4)) &
			(~precondition($,curr,exdv1,exdv2,nodek,pc12,pc22,pc3,alldv1,alldv2,alldv3,p11,p21,p4) | (~negpostcondition($,curr,exdv1,exdv2,nodek,pc12,pc22,pc3,alldv1,alldv2,alldv3,p11,p21,p4) | negpostcondition'($,curr,exdv1,exdv2,nodek,pc12,pc22,pc3,alldv1,alldv2,alldv3,p11,p21,p4,M)))	
		)));

macro existmodel(var2 $, var1 curr, var1 exdv1, var1 exdv2, var1 nodek, var0 pc12, var0 pc22, var0 pc3) =
	validmodel($,curr,exdv1,exdv2,nodek) &
	all1 alldv1,alldv2,alldv3 where alldv1 in $ & alldv2 in $ & alldv3 in $ : (
		ex0 p11,p21,p4: (
			precondition($,curr,exdv1,exdv2,nodek,pc12,pc22,pc3,alldv1,alldv2,alldv3,p11,p21,p4) &
			negpostcondition($,curr,exdv1,exdv2,nodek,pc12,pc22,pc3,alldv1,alldv2,alldv3,p11,p21,p4) &
			((nodek=alldv3) => (pc3 <=> ~p4)) &
			((alldv1=exdv1 & alldv2=exdv2) => ((pc12 <=> ~p11) & (pc22 <=> ~p21)))
		));

var2 $;
var1 curr,exdv1,exdv2,nodek;
var0 pc12,pc22,pc3;

existmodel($,curr,exdv1,exdv2,nodek,pc12,pc22,pc3) & minimalmodel($,curr,exdv1,exdv2,nodek,pc12,pc22,pc3) ;

