/* R := singly linked list, with a binary relations next, two variables, head and nil */

/* D := a binary relations reach:
	reach(x, y) := \exist2 S . (x \in S /\ y \in S /\ \forall z . (z \in S => exist u . (next(z, u) /\ u \in S))) */

/* F := a single data field called key */

/* P:= sorted
	sorted := \forall x y . (reach(x, y) => key(x) <= key(y)) */

/* S :=
Node sllReverse(Node head, Node nil, int k){
	
	Node newhead = nil;

	(loop invariant:
	twolists /\ sorted(head, tail) /\ rev-sorted(newhead, newtail) /\ forall x,y (x =/= nil /\ y =/= nil & newhead->x & head->y) => (key(x) <= key(y)))

	while (head =/= nil){
		Node t = newhead;
		newhead = head;
		head = next(head);
		next(newhead) = t;
	}

} */

ws1s;


pred next(var1 x, var1 y, var1 nil, var1 end) =
	(x+1=y & y<=nil) |
	(nil<=y & y+1=x & x<=end) ;


pred close(var1 x, var1 y, var2 M) =
	x<y & (~ex1 z: (z in M & x<z & z<y)) ;

pred next'(var1 x, var1 y, var1 nil, var1 end, var2 M) =
	(close(x, y, M) & y<=nil) |
	(close(y, x, M) & nil<=y & x<=end) ;

pred before(var1 end, var1 nil, var1 x, var1 y) =
	(x<y & y<nil) | (nil<y & y<x & x<=end) ;

pred before1(var1 end, var1 nil, var1 x, var1 y) =
	(1<=x & x<y & y<nil) | (nil<y & y<x) | (nil<y & x=0) ;

pred before1'(var1 end, var1 nil, var1 x, var1 y, var2 M) =
	((ex1 s where s in M : s < x) & x<y & y<nil) | (nil<y & y<x) | (nil<y & (~ex1 s where s in M : s < x)) ;




pred validmodel(var1 end, var1 nil, var1 head, var1 newhead, var1 exdv1, var1 exdv2) =
	end~=0 &
	nil<=end & head<=end & newhead<=end & exdv1<=end & exdv2<=end ;


pred validcomputation(var1 end, var1 nil, var1 head, var1 newhead) = newhead=nil ;



pred validmodel'(var1 end, var1 nil, var2 M) = 
	0 in M & end in M & nil in M & (ex1 s where s in M : s ~= nil) ;


/*
formula: ex1 head,newhead,exdv1,exdv2 :
		validcomputation &
		sll(head) &
		all1 v1,v2: ((before(head,v1) & before(v1,v2)) => data(v1)>data(v2)) &
		(
			~twolists1(head,newhead) |
			(before(end,nil,head,exdv1) & before(end,nil,exdv,exdv2) & data(exdv2)>data(exdv1)) |
			(before(end,nil,neadhead,exdv1) & before(end,nil,exdv,exdv2) & data(exdv2)>data(exdv1)) |
		) ;
*/



pred minimalmodel(var1 end, var1 nil, var1 head, var1 newhead, var1 exdv1, var1 exdv2) =
	~ex2 M :(
		(all1 s where s in M : s <= end) & 
		(ex1 s : s <= end & s notin M) &
		end in M & head in M & newhead in M & exdv1 in M & exdv2 in M &
		validmodel'(end,nil,M)
	 );


var1 end;
ex1 nil,head,newhead,exdv1,exdv2 : (
	validmodel(end,nil,head,newhead,exdv1,exdv2) & minimalmodel(end,nil,head,newhead,exdv1,exdv2) ) ;


/*var1 Bound;


pred bd(var1 Bound) =
all1 end: (
all1 nil,head,newhead,exdv1,exdv2: (
	(validmodel(end,nil,head,newhead,exdv1,exdv2) & minimalmodel(end,nil,head,newhead,exdv1,exdv2))
	=> 
	(end <= Bound))) ;

bd(Bound) & ~ex1 Bound': (bd(Bound') & Bound' < Bound) ; */

